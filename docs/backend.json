{
  "entities": {
    "Tenant": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Tenant",
      "type": "object",
      "description": "Represents a tenant in the Whizly AI application, isolating user data.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Tenant entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the tenant."
        },
        "ownerId": {
          "type": "string",
          "description": "Reference to UserProfile who owns the tenant. (Relationship: UserProfile 1:N Tenant)"
        },
        "createdAt": {
          "type": "string",
          "description": "Date and time when the tenant was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "name",
        "ownerId",
        "createdAt"
      ]
    },
    "UserProfile": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserProfile",
      "type": "object",
      "description": "Represents a user profile in the Whizly AI application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the UserProfile entity."
        },
        "email": {
          "type": "string",
          "description": "Email address of the user.",
          "format": "email"
        },
        "displayName": {
          "type": "string",
          "description": "Display name of the user."
        },
        "photoURL": {
          "type": "string",
          "description": "URL of the user's profile photo, if available.",
          "format": "uri"
        },
        "tenantIds": {
          "type": "array",
          "description": "References to Tenants that the user belongs to. (Relationship: UserProfile N:N Tenant)",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "email",
        "displayName"
      ]
    },
    "Lead": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Lead",
      "type": "object",
      "description": "Represents a lead in the CRM system.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Lead entity."
        },
        "tenantId": {
          "type": "string",
          "description": "Reference to Tenant. (Relationship: Tenant 1:N Lead)"
        },
        "name": {
          "type": "string",
          "description": "Name of the lead."
        },
        "email": {
          "type": "string",
          "description": "Email address of the lead.",
          "format": "email"
        },
        "phone": {
          "type": "string",
          "description": "Phone number of the lead."
        },
        "status": {
          "type": "string",
          "description": "Status of the lead (e.g., New, Contacted, Qualified)."
        },
        "assignedAgentId": {
          "type": "string",
          "description": "Reference to ChatbotAgent assigned to the lead. (Relationship: ChatbotAgent 1:N Lead)"
        },
        "createdAt": {
          "type": "string",
          "description": "Date and time when the lead was created.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "Date and time when the lead was last updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "tenantId",
        "name",
        "status",
        "createdAt"
      ]
    },
    "ChatbotAgent": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ChatbotAgent",
      "type": "object",
      "description": "Represents a chatbot agent that can be trained and used to handle conversations.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the ChatbotAgent entity."
        },
        "tenantId": {
          "type": "string",
          "description": "Reference to Tenant. (Relationship: Tenant 1:N ChatbotAgent)"
        },
        "name": {
          "type": "string",
          "description": "Name of the chatbot agent."
        },
        "description": {
          "type": "string",
          "description": "Description of the chatbot agent."
        },
        "trainingData": {
          "type": "string",
          "description": "The current training data provided for the agent."
        },
        "modelName": {
          "type": "string",
          "description": "Reference to trained model used for the agent."
        },
        "createdAt": {
          "type": "string",
          "description": "Date and time when the agent was created.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "Date and time when the agent was last updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "tenantId",
        "name",
        "createdAt"
      ]
    },
    "Conversation": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Conversation",
      "type": "object",
      "description": "Represents a conversation between a user and a chatbot agent.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Conversation entity."
        },
        "tenantId": {
          "type": "string",
          "description": "Reference to Tenant. (Relationship: Tenant 1:N Conversation)"
        },
        "leadId": {
          "type": "string",
          "description": "Reference to Lead associated with the conversation. (Relationship: Lead 1:N Conversation)"
        },
        "agentId": {
          "type": "string",
          "description": "Reference to ChatbotAgent handling the conversation. (Relationship: ChatbotAgent 1:N Conversation)"
        },
        "messages": {
          "type": "array",
          "description": "Array of messages in the conversation.",
          "items": {
            "type": "string"
          }
        },
        "createdAt": {
          "type": "string",
          "description": "Date and time when the conversation was created.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "Date and time when the conversation was last updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "tenantId",
        "leadId",
        "agentId",
        "createdAt"
      ]
    },
    "WhatsAppIntegration": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "WhatsAppIntegration",
      "type": "object",
      "description": "Represents the integration with the WhatsApp API.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the WhatsAppIntegration entity."
        },
        "tenantId": {
          "type": "string",
          "description": "Reference to Tenant. (Relationship: Tenant 1:N WhatsAppIntegration)"
        },
        "phoneNumber": {
          "type": "string",
          "description": "The phone number associated with the WhatsApp integration."
        },
        "apiKey": {
          "type": "string",
          "description": "The API key used to connect to the WhatsApp API."
        },
        "status": {
          "type": "string",
          "description": "The status of the WhatsApp integration (e.g., connected, disconnected)."
        },
        "createdAt": {
          "type": "string",
          "description": "Date and time when the integration was created.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "Date and time when the integration was last updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "tenantId",
        "phoneNumber",
        "apiKey",
        "status",
        "createdAt"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/userProfiles/{userProfileId}",
        "definition": {
          "entityName": "UserProfile",
          "schema": {
            "$ref": "#/backend/entities/UserProfile"
          },
          "description": "Stores user profile data. The document ID is the Firebase Auth UID.",
          "params": [
            {
              "name": "userProfileId",
              "description": "The Firebase Auth UID of the user."
            }
          ]
        }
      },
      {
        "path": "/tenants/{tenantId}",
        "definition": {
          "entityName": "Tenant",
          "schema": {
            "$ref": "#/backend/entities/Tenant"
          },
          "description": "Stores tenant information. Each tenant is isolated from others.",
          "params": [
            {
              "name": "tenantId",
              "description": "The unique ID of the tenant."
            }
          ]
        }
      },
      {
        "path": "/tenants/{tenantId}/leads/{leadId}",
        "definition": {
          "entityName": "Lead",
          "schema": {
            "$ref": "#/backend/entities/Lead"
          },
          "description": "Stores lead data for a specific tenant. Includes denormalized 'tenantId' for authorization independence.",
          "params": [
            {
              "name": "tenantId",
              "description": "The unique ID of the tenant."
            },
            {
              "name": "leadId",
              "description": "The unique ID of the lead."
            }
          ]
        }
      },
      {
        "path": "/tenants/{tenantId}/chatbotAgents/{chatbotAgentId}",
        "definition": {
          "entityName": "ChatbotAgent",
          "schema": {
            "$ref": "#/backend/entities/ChatbotAgent"
          },
          "description": "Stores chatbot agent data for a specific tenant. Includes denormalized 'tenantId' for authorization independence.",
          "params": [
            {
              "name": "tenantId",
              "description": "The unique ID of the tenant."
            },
            {
              "name": "chatbotAgentId",
              "description": "The unique ID of the chatbot agent."
            }
          ]
        }
      },
      {
        "path": "/tenants/{tenantId}/conversations/{conversationId}",
        "definition": {
          "entityName": "Conversation",
          "schema": {
            "$ref": "#/backend/entities/Conversation"
          },
          "description": "Stores conversation data for a specific tenant. Includes denormalized 'tenantId' for authorization independence.",
          "params": [
            {
              "name": "tenantId",
              "description": "The unique ID of the tenant."
            },
            {
              "name": "conversationId",
              "description": "The unique ID of the conversation."
            }
          ]
        }
      },
      {
        "path": "/tenants/{tenantId}/whatsAppIntegrations/{whatsAppIntegrationId}",
        "definition": {
          "entityName": "WhatsAppIntegration",
          "schema": {
            "$ref": "#/backend/entities/WhatsAppIntegration"
          },
          "description": "Stores WhatsApp integration data for a specific tenant. Includes denormalized 'tenantId' for authorization independence.",
          "params": [
            {
              "name": "tenantId",
              "description": "The unique ID of the tenant."
            },
            {
              "name": "whatsAppIntegrationId",
              "description": "The unique ID of the WhatsApp integration."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to ensure data isolation between tenants and enforce strict access control. Each tenant has its own dedicated space, and users can only access data within their assigned tenants. Authorization Independence is achieved by denormalizing tenantId into every document that belongs to a tenant. This eliminates the need for `get()` calls in security rules to verify tenant ownership.  Structural Segregation is implemented by storing different entities (Leads, ChatbotAgents, Conversations, WhatsAppIntegrations) in separate collections under each tenant. This allows for specific security rules tailored to each entity type. The structure is designed to support the required QAPs by enforcing tenant-based access control and preventing unauthorized data access."
  }
}
