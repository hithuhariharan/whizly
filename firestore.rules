/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a multi-tenant security model with role-based access control for the Whizly AI application.
 *
 * Data Structure:
 * - /tenants/{tenantId}: Stores tenant-specific data, isolating data for different organizations.
 * - /users/{userId}: Stores user profiles; accessible only to the user themselves.
 * - /tenants/{tenantId}/leads/{leadId}: Stores lead data, accessible based on user roles and explicit account access grants.
 * - /tenants/{tenantId}/chatbotAgents/{agentId}: Stores chatbot agent data, accessible to tenant members.
 * - /tenants/{tenantId}/conversations/{conversationId}: Stores conversation data, access controlled via AccountAccess.
 * - /tenants/{tenantId}/accountAccess/{accessId}: Stores explicit account access grants for users to leads.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user documents. Listing all users is denied.
 * - Tenant-level data access is implicitly granted to members of the tenant.
 * - Access to leads and conversations is explicitly managed via the AccountAccess collection,
 *   which allows for fine-grained control over who can view chats and edit leads.
 * - Data validation is minimized to focus on authorization, allowing for flexible data shapes.
 *
 * Denormalization for Authorization:
 * - The AccountAccess collection denormalizes user and lead IDs, allowing for efficient rules
 *   without requiring additional `get()` calls.
 *
 * Structural Segregation:
 * - Tenant-specific data is stored in subcollections under the /tenants/{tenantId} path,
 *   ensuring data isolation and efficient access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided userId.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's ID matches the resource ownerId
     *              and the resource exists.
     * @param ownerId The ownerId to compare to.
     */
    function isExistingOwner(ownerId) {
        return isSignedIn() && resource.data.ownerId == request.auth.uid;
    }

    /**
     * @description Defines the valid roles for users within the application.
     */
    function isValidRole(role) {
        return role in ["Admin", "Manager", "Employee"];
    }

    /**
     * @description Rules for the /tenants/{tenantId} collection.
     * @path /tenants/{tenantId}
     * @allow (create) User with ID 'tenant123' can create a tenant if ownerId is 'tenant123'.
     * @deny (create) User with ID 'user456' cannot create a tenant with ownerId 'tenant123'.
     * @allow (get) Any authenticated user can get a tenant.
     * @deny (list) Listing all tenants is not allowed.
     * @principle Enforces tenant ownership and prevents unauthorized listing.
     */
    match /tenants/{tenantId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update, delete: if isSignedIn() && resource.data.ownerId == request.auth.uid;
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own user document.
     * @deny (create) User with ID 'user456' cannot create a user document for 'user123'.
     * @allow (get) User with ID 'user123' can get their own user document.
     * @deny (update) User with ID 'user456' cannot update user document for 'user123'.
     * @principle Enforces user-ownership and prevents unauthorized access to user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Explicitly disallowing listing all users
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for the /tenants/{tenantId}/leads/{leadId} collection.
     * @path /tenants/{tenantId}/leads/{leadId}
     * @allow (create) Authenticated user can create a lead in a tenant if tenantId matches the lead's tenantId.
     * @deny (create) Authenticated user cannot create a lead if tenantId does not match the lead's tenantId.
     * @allow (get) Any authenticated user can get a lead. Access is further restricted by AccountAccess rules.
     * @deny (list) Listing leads without proper authorization is not allowed; AccountAccess rules apply.
     * @principle Enforces tenant-based lead access and restricts unauthorized listing.
     */
    match /tenants/{tenantId}/leads/{leadId} {
      allow get: if isSignedIn();
      allow list: if false;  // Listing requires checking AccountAccess.  Handled below
      allow create: if isSignedIn() && request.resource.data.tenantId == tenantId;
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for the /tenants/{tenantId}/chatbotAgents/{agentId} collection.
     * @path /tenants/{tenantId}/chatbotAgents/{agentId}
     * @allow (create) User can create a chatbot agent within their tenant.
     * @deny (create) User cannot create a chatbot agent in another tenant.
     * @allow (get) Any authenticated user can get a chatbot agent.
     * @deny (list) Listing chatbot agents without proper authorization is not allowed.
     * @principle Enforces tenant-based chatbot agent access and prevents unauthorized listing.
     */
    match /tenants/{tenantId}/chatbotAgents/{agentId} {
      allow get: if isSignedIn();
      allow list: if false;  // Listing is allowed for members of the tenant.
      allow create: if isSignedIn() && request.resource.data.tenantId == tenantId;
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for the /tenants/{tenantId}/conversations/{conversationId} collection.
     * @path /tenants/{tenantId}/conversations/{conversationId}
     * @allow (create) User can create a conversation within their tenant.
     * @deny (create) User cannot create a conversation in another tenant.
     * @allow (get) Conversation can be read if the user has 'canViewChat' access in the AccountAccess collection.
     * @deny (list) Conversations list is denied.
     * @principle Enforces tenant-based conversation access and relies on AccountAccess for authorization.
     */
    match /tenants/{tenantId}/conversations/{conversationId} {
      allow get: if isSignedIn();
      allow list: if false; // Access control is managed via the AccountAccess collection
      allow create: if isSignedIn() && request.resource.data.tenantId == tenantId;
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for the /tenants/{tenantId}/accountAccess/{accessId} collection.
     * @path /tenants/{tenantId}/accountAccess/{accessId}
     * @allow (create) User can create account access within their tenant.
     * @deny (create) User cannot create account access in another tenant.
     * @allow (get) Any authenticated user can get account access.
     * @deny (list) Listing account access is generally not allowed.
     * @principle Enforces tenant-based account access and prevents unauthorized listing.
     */
    match /tenants/{tenantId}/accountAccess/{accessId} {
      allow get: if isSignedIn();
      allow list: if false; // Allow listing.
      allow create: if isSignedIn() && request.resource.data.tenantId == tenantId;
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
  }
}