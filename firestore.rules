/**
 * Firestore Security Rules for the Whizly AI multi-tenant backend.
 *
 * These rules enforce:
 *  - User profiles are private and only editable by the authenticated owner.
 *  - Tenant-scoped data is only readable by members whose profile lists the tenantId.
 *  - Only tenant admins (role === 'Admin') may write tenant data.
 *  - Every tenant-owned document must persist the tenantId field used for authorization checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    function userProfileDoc(uid) {
      return get(/databases/$(database)/documents/userProfiles/$(uid));
    }

    function currentUserProfile() {
      return userProfileDoc(request.auth.uid);
    }

    function hasProfile() {
      return isSignedIn() && currentUserProfile().exists();
    }

    function userHasTenant(tenantId) {
      return hasProfile()
        && currentUserProfile().data.tenantIds is list
        && currentUserProfile().data.tenantIds.hasAny([tenantId]);
    }

    function userIsTenantAdmin(tenantId) {
      return userHasTenant(tenantId) && currentUserProfile().data.role == 'Admin';
    }

    match /userProfiles/{userProfileId} {
      allow get: if isSignedIn() && request.auth.uid == userProfileId;
      allow list: if false;
      allow create: if isSignedIn()
        && request.auth.uid == userProfileId
        && request.resource.data.id == userProfileId;
      allow update: if isSignedIn()
        && request.auth.uid == userProfileId
        && request.resource.data.id == resource.data.id;
      allow delete: if false;
    }

    match /tenants/{tenantId} {
      allow get: if userHasTenant(tenantId);
      allow list: if false;
      allow create: if isSignedIn()
        && request.resource.data.ownerId == request.auth.uid
        && request.resource.data.id == tenantId;
      allow update: if userIsTenantAdmin(tenantId)
        && request.resource.data.id == resource.data.id;
      allow delete: if false;

      match /{collectionId}/{docId} {
        function docTenantId() {
          return tenantId;
        }

        allow get, list: if userHasTenant(docTenantId());

        allow create: if userIsTenantAdmin(docTenantId())
          && request.resource.data.tenantId == docTenantId();

        allow update: if userIsTenantAdmin(docTenantId())
          && resource.data.tenantId == docTenantId()
          && request.resource.data.tenantId == docTenantId();

        allow delete: if userIsTenantAdmin(docTenantId());
      }
    }
  }
}
